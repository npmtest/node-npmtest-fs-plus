{"/home/travis/build/npmtest/node-npmtest-fs-plus/test.js":"/* istanbul instrument in package npmtest_fs_plus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-plus/lib.npmtest_fs_plus.js":"/* istanbul instrument in package npmtest_fs_plus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fs_plus = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fs_plus = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-plus/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fs-plus && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fs_plus */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fs_plus\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fs_plus.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_fs_plus.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fs_plus.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_fs_plus.__dirname + '/lib.npmtest_fs_plus.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fs-plus/node_modules/fs-plus/lib/fs-plus.js":"(function() {\n  var BINARY_EXTENSIONS, COMPRESSED_EXTENSIONS, IMAGE_EXTENSIONS, MARKDOWN_EXTENSIONS, Module, async, fs, fsPlus, isMoveTargetValid, isMoveTargetValidSync, isPathValid, lstatSyncNoException, mkdirp, path, rimraf, statSyncNoException, _,\n    __slice = [].slice;\n\n  fs = require('fs');\n\n  Module = require('module');\n\n  path = require('path');\n\n  _ = require('underscore-plus');\n\n  async = require('async');\n\n  mkdirp = require('mkdirp');\n\n  rimraf = require('rimraf');\n\n  fsPlus = {\n    __esModule: false,\n    getHomeDirectory: function() {\n      if (process.platform === 'win32') {\n        return process.env.USERPROFILE;\n      } else {\n        return process.env.HOME;\n      }\n    },\n    absolute: function(relativePath) {\n      var e;\n      if (relativePath == null) {\n        return null;\n      }\n      relativePath = fsPlus.resolveHome(relativePath);\n      try {\n        return fs.realpathSync(relativePath);\n      } catch (_error) {\n        e = _error;\n        return relativePath;\n      }\n    },\n    normalize: function(pathToNormalize) {\n      if (pathToNormalize == null) {\n        return null;\n      }\n      return fsPlus.resolveHome(path.normalize(pathToNormalize.toString()));\n    },\n    resolveHome: function(relativePath) {\n      if (relativePath === '~') {\n        return fsPlus.getHomeDirectory();\n      } else if (relativePath.indexOf(\"~\" + path.sep) === 0) {\n        return \"\" + (fsPlus.getHomeDirectory()) + (relativePath.substring(1));\n      }\n      return relativePath;\n    },\n    tildify: function(pathToTildify) {\n      var homeDir, normalized;\n      if (process.platform === 'win32') {\n        return pathToTildify;\n      }\n      normalized = fsPlus.normalize(pathToTildify);\n      homeDir = fsPlus.getHomeDirectory();\n      if (normalized === homeDir) {\n        return '~';\n      }\n      if (!normalized.startsWith(path.join(homeDir, path.sep))) {\n        return pathToTildify;\n      }\n      return path.join('~', path.sep, normalized.substring(homeDir.length + 1));\n    },\n    getAppDataDirectory: function() {\n      switch (process.platform) {\n        case 'darwin':\n          return fsPlus.absolute(path.join('~', 'Library', 'Application Support'));\n        case 'linux':\n          return '/var/lib';\n        case 'win32':\n          return process.env.APPDATA;\n        default:\n          return null;\n      }\n    },\n    isAbsolute: function(pathToCheck) {\n      if (pathToCheck == null) {\n        pathToCheck = '';\n      }\n      if (process.platform === 'win32') {\n        if (pathToCheck[1] === ':') {\n          return true;\n        }\n        if (pathToCheck[0] === '\\\\' && pathToCheck[1] === '\\\\') {\n          return true;\n        }\n      } else {\n        return pathToCheck[0] === '/';\n      }\n      return false;\n    },\n    existsSync: function(pathToCheck) {\n      return isPathValid(pathToCheck) && (statSyncNoException(pathToCheck) !== false);\n    },\n    isDirectorySync: function(directoryPath) {\n      var stat;\n      if (!isPathValid(directoryPath)) {\n        return false;\n      }\n      if (stat = statSyncNoException(directoryPath)) {\n        return stat.isDirectory();\n      } else {\n        return false;\n      }\n    },\n    isDirectory: function(directoryPath, done) {\n      if (!isPathValid(directoryPath)) {\n        return done(false);\n      }\n      return fs.stat(directoryPath, function(error, stat) {\n        if (error != null) {\n          return done(false);\n        } else {\n          return done(stat.isDirectory());\n        }\n      });\n    },\n    isFileSync: function(filePath) {\n      var stat;\n      if (!isPathValid(filePath)) {\n        return false;\n      }\n      if (stat = statSyncNoException(filePath)) {\n        return stat.isFile();\n      } else {\n        return false;\n      }\n    },\n    isSymbolicLinkSync: function(symlinkPath) {\n      var stat;\n      if (!isPathValid(symlinkPath)) {\n        return false;\n      }\n      if (stat = lstatSyncNoException(symlinkPath)) {\n        return stat.isSymbolicLink();\n      } else {\n        return false;\n      }\n    },\n    isSymbolicLink: function(symlinkPath, callback) {\n      if (isPathValid(symlinkPath)) {\n        return fs.lstat(symlinkPath, function(error, stat) {\n          return typeof callback === \"function\" ? callback((stat != null) && stat.isSymbolicLink()) : void 0;\n        });\n      } else {\n        return process.nextTick(function() {\n          return typeof callback === \"function\" ? callback(false) : void 0;\n        });\n      }\n    },\n    isExecutableSync: function(pathToCheck) {\n      var stat;\n      if (!isPathValid(pathToCheck)) {\n        return false;\n      }\n      if (stat = statSyncNoException(pathToCheck)) {\n        return (stat.mode & 0x1ff & 1) !== 0;\n      } else {\n        return false;\n      }\n    },\n    getSizeSync: function(pathToCheck) {\n      var _ref;\n      if (isPathValid(pathToCheck)) {\n        return (_ref = statSyncNoException(pathToCheck).size) != null ? _ref : -1;\n      } else {\n        return -1;\n      }\n    },\n    listSync: function(rootPath, extensions) {\n      var paths;\n      if (!fsPlus.isDirectorySync(rootPath)) {\n        return [];\n      }\n      paths = fs.readdirSync(rootPath);\n      if (extensions) {\n        paths = fsPlus.filterExtensions(paths, extensions);\n      }\n      paths = paths.sort(function(a, b) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n      });\n      paths = paths.map(function(childPath) {\n        return path.join(rootPath, childPath);\n      });\n      return paths;\n    },\n    list: function() {\n      var done, extensions, rest, rootPath;\n      rootPath = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if (rest.length > 1) {\n        extensions = rest.shift();\n      }\n      done = rest.shift();\n      return fs.readdir(rootPath, function(error, paths) {\n        if (error != null) {\n          return done(error);\n        } else {\n          if (extensions) {\n            paths = fsPlus.filterExtensions(paths, extensions);\n          }\n          paths = paths.sort(function(a, b) {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n          });\n          paths = paths.map(function(childPath) {\n            return path.join(rootPath, childPath);\n          });\n          return done(null, paths);\n        }\n      });\n    },\n    filterExtensions: function(paths, extensions) {\n      extensions = extensions.map(function(ext) {\n        if (ext === '') {\n          return ext;\n        } else {\n          return '.' + ext.replace(/^\\./, '');\n        }\n      });\n      return paths.filter(function(pathToCheck) {\n        return _.include(extensions, path.extname(pathToCheck));\n      });\n    },\n    listTreeSync: function(rootPath) {\n      var onPath, paths;\n      paths = [];\n      onPath = function(childPath) {\n        paths.push(childPath);\n        return true;\n      };\n      fsPlus.traverseTreeSync(rootPath, onPath, onPath);\n      return paths;\n    },\n    move: function(source, target, callback) {\n      return isMoveTargetValid(source, target, function(isMoveTargetValidErr, isTargetValid) {\n        var error, targetParentPath;\n        if (isMoveTargetValidErr) {\n          callback(isMoveTargetValidErr);\n          return;\n        }\n        if (!isTargetValid) {\n          error = new Error(\"'\" + target + \"' already exists.\");\n          error.code = 'EEXIST';\n          callback(error);\n          return;\n        }\n        targetParentPath = path.dirname(target);\n        return fs.exists(targetParentPath, function(targetParentExists) {\n          if (targetParentExists) {\n            fs.rename(source, target, callback);\n            return;\n          }\n          return fsPlus.makeTree(targetParentPath, function(makeTreeErr) {\n            if (makeTreeErr) {\n              callback(makeTreeErr);\n              return;\n            }\n            return fs.rename(source, target, callback);\n          });\n        });\n      });\n    },\n    moveSync: function(source, target) {\n      var error, targetParentPath;\n      if (!isMoveTargetValidSync(source, target)) {\n        error = new Error(\"'\" + target + \"' already exists.\");\n        error.code = 'EEXIST';\n        throw error;\n      }\n      targetParentPath = path.dirname(target);\n      if (!fs.existsSync(targetParentPath)) {\n        fsPlus.makeTreeSync(targetParentPath);\n      }\n      return fs.renameSync(source, target);\n    },\n    removeSync: function(pathToRemove) {\n      return rimraf.sync(pathToRemove);\n    },\n    remove: function(pathToRemove, callback) {\n      return rimraf(pathToRemove, callback);\n    },\n    writeFileSync: function(filePath, content, options) {\n      mkdirp.sync(path.dirname(filePath));\n      return fs.writeFileSync(filePath, content, options);\n    },\n    writeFile: function(filePath, content, options, callback) {\n      callback = _.last(arguments);\n      return mkdirp(path.dirname(filePath), function(error) {\n        if (error != null) {\n          return typeof callback === \"function\" ? callback(error) : void 0;\n        } else {\n          return fs.writeFile(filePath, content, options, callback);\n        }\n      });\n    },\n    copy: function(sourcePath, destinationPath, done) {\n      return mkdirp(path.dirname(destinationPath), function(error) {\n        var destinationStream, sourceStream;\n        if (error != null) {\n          if (typeof done === \"function\") {\n            done(error);\n          }\n          return;\n        }\n        sourceStream = fs.createReadStream(sourcePath);\n        sourceStream.on('error', function(error) {\n          if (typeof done === \"function\") {\n            done(error);\n          }\n          return done = null;\n        });\n        destinationStream = fs.createWriteStream(destinationPath);\n        destinationStream.on('error', function(error) {\n          if (typeof done === \"function\") {\n            done(error);\n          }\n          return done = null;\n        });\n        destinationStream.on('close', function() {\n          if (typeof done === \"function\") {\n            done();\n          }\n          return done = null;\n        });\n        return sourceStream.pipe(destinationStream);\n      });\n    },\n    copySync: function(sourcePath, destinationPath) {\n      var destinationFilePath, source, sourceFilePath, sources, _i, _len, _results;\n      sources = fs.readdirSync(sourcePath);\n      mkdirp.sync(destinationPath);\n      _results = [];\n      for (_i = 0, _len = sources.length; _i < _len; _i++) {\n        source = sources[_i];\n        sourceFilePath = path.join(sourcePath, source);\n        destinationFilePath = path.join(destinationPath, source);\n        if (fsPlus.isDirectorySync(sourceFilePath)) {\n          _results.push(fsPlus.copySync(sourceFilePath, destinationFilePath));\n        } else {\n          _results.push(fsPlus.copyFileSync(sourceFilePath, destinationFilePath));\n        }\n      }\n      return _results;\n    },\n    copyFileSync: function(sourceFilePath, destinationFilePath, bufferSize) {\n      var buffer, bytesRead, position, readFd, writeFd, _results;\n      if (bufferSize == null) {\n        bufferSize = 16 * 1024;\n      }\n      mkdirp.sync(path.dirname(destinationFilePath));\n      readFd = null;\n      writeFd = null;\n      try {\n        readFd = fs.openSync(sourceFilePath, 'r');\n        writeFd = fs.openSync(destinationFilePath, 'w');\n        bytesRead = 1;\n        position = 0;\n        _results = [];\n        while (bytesRead > 0) {\n          buffer = new Buffer(bufferSize);\n          bytesRead = fs.readSync(readFd, buffer, 0, buffer.length, position);\n          fs.writeSync(writeFd, buffer, 0, bytesRead, position);\n          _results.push(position += bytesRead);\n        }\n        return _results;\n      } finally {\n        if (readFd != null) {\n          fs.closeSync(readFd);\n        }\n        if (writeFd != null) {\n          fs.closeSync(writeFd);\n        }\n      }\n    },\n    makeTreeSync: function(directoryPath) {\n      if (!fsPlus.isDirectorySync(directoryPath)) {\n        return mkdirp.sync(directoryPath);\n      }\n    },\n    makeTree: function(directoryPath, callback) {\n      return fsPlus.isDirectory(directoryPath, function(exists) {\n        if (exists) {\n          return typeof callback === \"function\" ? callback() : void 0;\n        }\n        return mkdirp(directoryPath, function(error) {\n          return typeof callback === \"function\" ? callback(error) : void 0;\n        });\n      });\n    },\n    traverseTreeSync: function(rootPath, onFile, onDirectory) {\n      var traverse;\n      if (onDirectory == null) {\n        onDirectory = onFile;\n      }\n      if (!fsPlus.isDirectorySync(rootPath)) {\n        return;\n      }\n      traverse = function(directoryPath, onFile, onDirectory) {\n        var childPath, file, linkStats, stats, _i, _len, _ref;\n        _ref = fs.readdirSync(directoryPath);\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          file = _ref[_i];\n          childPath = path.join(directoryPath, file);\n          stats = fs.lstatSync(childPath);\n          if (stats.isSymbolicLink()) {\n            if (linkStats = statSyncNoException(childPath)) {\n              stats = linkStats;\n            }\n          }\n          if (stats.isDirectory()) {\n            if (onDirectory(childPath)) {\n              traverse(childPath, onFile, onDirectory);\n            }\n          } else if (stats.isFile()) {\n            onFile(childPath);\n          }\n        }\n        return void 0;\n      };\n      return traverse(rootPath, onFile, onDirectory);\n    },\n    traverseTree: function(rootPath, onFile, onDirectory, onDone) {\n      return fs.readdir(rootPath, function(error, files) {\n        var file, queue, _i, _len, _results;\n        if (error) {\n          return typeof onDone === \"function\" ? onDone() : void 0;\n        } else {\n          queue = async.queue(function(childPath, callback) {\n            return fs.stat(childPath, function(error, stats) {\n              if (error) {\n                return callback(error);\n              } else if (stats.isFile()) {\n                onFile(childPath);\n                return callback();\n              } else if (stats.isDirectory()) {\n                if (onDirectory(childPath)) {\n                  return fs.readdir(childPath, function(error, files) {\n                    var file, _i, _len;\n                    if (error) {\n                      return callback(error);\n                    } else {\n                      for (_i = 0, _len = files.length; _i < _len; _i++) {\n                        file = files[_i];\n                        queue.unshift(path.join(childPath, file));\n                      }\n                      return callback();\n                    }\n                  });\n                } else {\n                  return callback();\n                }\n              } else {\n                return callback();\n              }\n            });\n          });\n          queue.concurrency = 1;\n          queue.drain = onDone;\n          _results = [];\n          for (_i = 0, _len = files.length; _i < _len; _i++) {\n            file = files[_i];\n            _results.push(queue.push(path.join(rootPath, file)));\n          }\n          return _results;\n        }\n      });\n    },\n    md5ForPath: function(pathToDigest) {\n      var contents;\n      contents = fs.readFileSync(pathToDigest);\n      return require('crypto').createHash('md5').update(contents).digest('hex');\n    },\n    resolve: function() {\n      var args, candidatePath, extensions, loadPath, loadPaths, pathToResolve, resolvedPath, _i, _len, _ref;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      if (_.isArray(_.last(args))) {\n        extensions = args.pop();\n      }\n      pathToResolve = (_ref = args.pop()) != null ? _ref.toString() : void 0;\n      loadPaths = args;\n      if (!pathToResolve) {\n        return void 0;\n      }\n      if (fsPlus.isAbsolute(pathToResolve)) {\n        if (extensions && (resolvedPath = fsPlus.resolveExtension(pathToResolve, extensions))) {\n          return resolvedPath;\n        } else {\n          if (fsPlus.existsSync(pathToResolve)) {\n            return pathToResolve;\n          }\n        }\n      }\n      for (_i = 0, _len = loadPaths.length; _i < _len; _i++) {\n        loadPath = loadPaths[_i];\n        candidatePath = path.join(loadPath, pathToResolve);\n        if (extensions) {\n          if (resolvedPath = fsPlus.resolveExtension(candidatePath, extensions)) {\n            return resolvedPath;\n          }\n        } else {\n          if (fsPlus.existsSync(candidatePath)) {\n            return fsPlus.absolute(candidatePath);\n          }\n        }\n      }\n      return void 0;\n    },\n    resolveOnLoadPath: function() {\n      var args, loadPaths, modulePaths;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      modulePaths = null;\n      if (module.paths != null) {\n        modulePaths = module.paths;\n      } else if (process.resourcesPath) {\n        modulePaths = [path.join(process.resourcesPath, 'app', 'node_modules')];\n      } else {\n        modulePaths = [];\n      }\n      loadPaths = Module.globalPaths.concat(modulePaths);\n      return fsPlus.resolve.apply(fsPlus, __slice.call(loadPaths).concat(__slice.call(args)));\n    },\n    resolveExtension: function(pathToResolve, extensions) {\n      var extension, pathWithExtension, _i, _len;\n      for (_i = 0, _len = extensions.length; _i < _len; _i++) {\n        extension = extensions[_i];\n        if (extension === \"\") {\n          if (fsPlus.existsSync(pathToResolve)) {\n            return fsPlus.absolute(pathToResolve);\n          }\n        } else {\n          pathWithExtension = pathToResolve + \".\" + extension.replace(/^\\./, \"\");\n          if (fsPlus.existsSync(pathWithExtension)) {\n            return fsPlus.absolute(pathWithExtension);\n          }\n        }\n      }\n      return void 0;\n    },\n    isCompressedExtension: function(ext) {\n      if (ext == null) {\n        return false;\n      }\n      return COMPRESSED_EXTENSIONS.hasOwnProperty(ext.toLowerCase());\n    },\n    isImageExtension: function(ext) {\n      if (ext == null) {\n        return false;\n      }\n      return IMAGE_EXTENSIONS.hasOwnProperty(ext.toLowerCase());\n    },\n    isPdfExtension: function(ext) {\n      return (ext != null ? ext.toLowerCase() : void 0) === '.pdf';\n    },\n    isBinaryExtension: function(ext) {\n      if (ext == null) {\n        return false;\n      }\n      return BINARY_EXTENSIONS.hasOwnProperty(ext.toLowerCase());\n    },\n    isReadmePath: function(readmePath) {\n      var base, extension;\n      extension = path.extname(readmePath);\n      base = path.basename(readmePath, extension).toLowerCase();\n      return base === 'readme' && (extension === '' || fsPlus.isMarkdownExtension(extension));\n    },\n    isMarkdownExtension: function(ext) {\n      if (ext == null) {\n        return false;\n      }\n      return MARKDOWN_EXTENSIONS.hasOwnProperty(ext.toLowerCase());\n    },\n    isCaseInsensitive: function() {\n      var lowerCaseStat, upperCaseStat;\n      if (fsPlus.caseInsensitiveFs == null) {\n        lowerCaseStat = statSyncNoException(process.execPath.toLowerCase());\n        upperCaseStat = statSyncNoException(process.execPath.toUpperCase());\n        if (lowerCaseStat && upperCaseStat) {\n          fsPlus.caseInsensitiveFs = lowerCaseStat.dev === upperCaseStat.dev && lowerCaseStat.ino === upperCaseStat.ino;\n        } else {\n          fsPlus.caseInsensitiveFs = false;\n        }\n      }\n      return fsPlus.caseInsensitiveFs;\n    },\n    isCaseSensitive: function() {\n      return !fsPlus.isCaseInsensitive();\n    }\n  };\n\n  statSyncNoException = function() {\n    var args, error;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    if (fs.statSyncNoException) {\n      return fs.statSyncNoException.apply(fs, args);\n    } else {\n      try {\n        return fs.statSync.apply(fs, args);\n      } catch (_error) {\n        error = _error;\n        return false;\n      }\n    }\n  };\n\n  lstatSyncNoException = function() {\n    var args, error;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    if (fs.lstatSyncNoException) {\n      return fs.lstatSyncNoException.apply(fs, args);\n    } else {\n      try {\n        return fs.lstatSync.apply(fs, args);\n      } catch (_error) {\n        error = _error;\n        return false;\n      }\n    }\n  };\n\n  BINARY_EXTENSIONS = {\n    '.ds_store': true,\n    '.a': true,\n    '.exe': true,\n    '.o': true,\n    '.pyc': true,\n    '.pyo': true,\n    '.so': true,\n    '.woff': true\n  };\n\n  COMPRESSED_EXTENSIONS = {\n    '.bz2': true,\n    '.egg': true,\n    '.epub': true,\n    '.gem': true,\n    '.gz': true,\n    '.jar': true,\n    '.lz': true,\n    '.lzma': true,\n    '.lzo': true,\n    '.rar': true,\n    '.tar': true,\n    '.tgz': true,\n    '.war': true,\n    '.whl': true,\n    '.xpi': true,\n    '.xz': true,\n    '.z': true,\n    '.zip': true\n  };\n\n  IMAGE_EXTENSIONS = {\n    '.gif': true,\n    '.ico': true,\n    '.jpeg': true,\n    '.jpg': true,\n    '.png': true,\n    '.tif': true,\n    '.tiff': true,\n    '.webp': true\n  };\n\n  MARKDOWN_EXTENSIONS = {\n    '.markdown': true,\n    '.md': true,\n    '.mdown': true,\n    '.mkd': true,\n    '.mkdown': true,\n    '.rmd': true,\n    '.ron': true\n  };\n\n  isPathValid = function(pathToCheck) {\n    return (pathToCheck != null) && typeof pathToCheck === 'string' && pathToCheck.length > 0;\n  };\n\n  isMoveTargetValid = function(source, target, callback) {\n    return fs.stat(source, function(oldErr, oldStat) {\n      if (oldErr) {\n        callback(oldErr);\n        return;\n      }\n      return fs.stat(target, function(newErr, newStat) {\n        if (newErr && newErr.code === 'ENOENT') {\n          callback(void 0, true);\n          return;\n        }\n        return callback(void 0, source.toLowerCase() === target.toLowerCase() && oldStat.dev === newStat.dev && oldStat.ino === newStat.ino);\n      });\n    });\n  };\n\n  isMoveTargetValidSync = function(source, target) {\n    var newStat, oldStat;\n    oldStat = statSyncNoException(source);\n    newStat = statSyncNoException(target);\n    if (!(oldStat && newStat)) {\n      return true;\n    }\n    return source.toLowerCase() === target.toLowerCase() && oldStat.dev === newStat.dev && oldStat.ino === newStat.ino;\n  };\n\n  module.exports = new Proxy({}, {\n    get: function(target, key) {\n      var _ref;\n      return (_ref = fsPlus[key]) != null ? _ref : fs[key];\n    },\n    set: function(target, key, value) {\n      return fsPlus[key] = value;\n    }\n  });\n\n}).call(this);\n"}